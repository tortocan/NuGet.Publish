<#@ template debug="false" hostspecific="true" language="C#v3.5" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".cs" #>
<#
	string assemblyFileName = "AssemblyInfo.cs";
	string assemblyFilePath = Host.ResolvePath(assemblyFileName);
	// Backup exiting AssemblyInfo file.
	string backupFilePath = assemblyFilePath.Replace(".cs", ".bak");
	if (!File.Exists(backupFilePath))File.Copy(assemblyFilePath, backupFilePath);

	// Build the header template that will latter be amended and attached to the file.
	string[] template = {
		$"// Major= ",
		$"// Minor= ",
		$"// Build= ",
		$"// Revision= ",
		$"// Date created= ",
		$"// This code was generated by a tool. Any changes made manually will be lost",
		$"// the next time this code is regenerated."
	};

	// Get current values from exiting AssemblyInfo file.
	StringBuilder assemblyContent = new StringBuilder();
	var currentFile = File.OpenText(assemblyFilePath);
	string line;
	while ((line = currentFile.ReadLine()) != null)
	{
		// Remove AssemblyVersion and AssemblyFileVersion from exiting AssemblyInfo file,
		// Ignore them if they are commented out.
		if (!line.StartsWith("//") && line.Contains("[assembly: AssemblyVersion") | line.Contains("[assembly: AssemblyFileVersion"))
		{
			line = string.Empty;
		}
		// Append only values that are not contained in the template
		// and treat null and whitespace values as newlines.
		if (string.IsNullOrWhiteSpace(line) | !template.ToList().Any(x => x.Trim('=').Contains($"{line.Split('=')[0]}")))
		{
			assemblyContent.AppendLine(line);
		}
	}
	currentFile.Close();

	int major = 0;
	int minor = 0;
	int build = 0;
	int revision = 0;
	int totalDays = 0;
	string date = DateTime.Now.ToShortDateString(); // Sets on which date the file was created.
	string header = string.Empty;
	try
	{
		// Read version values from AssemblyInfo file.
		using (var file = File.OpenText(assemblyFilePath))
		{
			// Get major value from file.
			string nextFileLine = file.ReadLine();
			string majorLine = (nextFileLine.Contains(template[0])) ? nextFileLine.Replace(template[0], string.Empty) : string.Empty;
			// Get minor value from file.
			nextFileLine = file.ReadLine();
			string minorLine = (nextFileLine.Contains(template[1])) ? nextFileLine.Replace(template[1], string.Empty) : string.Empty;
			// Get build value from file.
			nextFileLine = file.ReadLine();
			string buildLine = (nextFileLine.Contains(template[2])) ? nextFileLine.Replace(template[2], string.Empty) : string.Empty;
			// Get revision value from file.
			nextFileLine = file.ReadLine();
			string revisionLine = (nextFileLine.Contains(template[3])) ? nextFileLine.Replace(template[3], string.Empty) : string.Empty;
			// Get date value from file.
			nextFileLine = file.ReadLine();
			// Try parse values
			if (nextFileLine.Contains(template[4]))
			{
				date = nextFileLine.Replace(template[4], string.Empty).Trim();
				totalDays = (int)(DateTime.UtcNow - DateTime.Parse(date)).TotalDays;
			}
			major = int.Parse(majorLine);
			minor = int.Parse(minorLine);
			build = int.Parse(buildLine) + 1;
			revision = int.Parse(revisionLine);
			if (revision < totalDays) revision += totalDays;
		}
	}
	catch
	{
		major = 1;
		minor = 0;
		build = 0;
		revision = 0;
		date = DateTime.Now.ToShortDateString();
	}
	// Append version values from file or catch block.
	template[0] += major;
	template[1] += minor;
	template[2] += build;
	template[3] += revision;
	template[4] += date;
	// Build first lines for the file.
	StringBuilder headerBuilder = new StringBuilder();
	foreach (var item in template)
	{
		headerBuilder.AppendLine(item);
	}
	header = headerBuilder.ToString();
	// Get version from values.
	string version = $"{major}.{minor}.{build}.{revision}";
	// Merge assemblyContent with AssemblyVersion and AssemblyFileVersion values.
	string appendAssemblyContent = $"{assemblyContent.ToString().Trim()}{Environment.NewLine}[assembly: AssemblyVersion(\"{version}\")]";
	appendAssemblyContent += $"{Environment.NewLine}[assembly: AssemblyFileVersion(\"{version}\")]";
#><#= header #><#= appendAssemblyContent #>